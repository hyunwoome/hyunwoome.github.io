I";<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17677">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>문자열 <code class="language-plaintext highlighter-rouge">str1</code>과 <code class="language-plaintext highlighter-rouge">str2</code>가 주어진다. 서로 두칸씩 겹치게 잘라서 교집합과 합집합을 나눈 수에 65536를 곱해 반환하는 문제이다.</p>

<p><br /></p>

<h2 id="참고-코드">참고 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">str1</span><span class="p">,</span> <span class="nx">str2</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">explode</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">A-Za-z</span><span class="se">]{2}</span><span class="sr">/</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="nx">str1</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="nx">str2</span><span class="p">);</span>
  <span class="kd">const</span> <span class="kd">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">([...</span><span class="nx">arr1</span><span class="p">,</span> <span class="p">...</span><span class="nx">arr2</span><span class="p">]);</span> <span class="c1">// aa</span>
  <span class="kd">let</span> <span class="nx">union</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">intersection</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">set</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">has1</span> <span class="o">=</span> <span class="nx">arr1</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">===</span> <span class="nx">item</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">has2</span> <span class="o">=</span> <span class="nx">arr2</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">===</span> <span class="nx">item</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
    <span class="nx">union</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">has1</span><span class="p">,</span> <span class="nx">has2</span><span class="p">);</span>
    <span class="nx">intersection</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">has1</span><span class="p">,</span> <span class="nx">has2</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">union</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">?</span> <span class="mi">65536</span> <span class="p">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">intersection</span> <span class="o">/</span> <span class="nx">union</span><span class="p">)</span> <span class="o">*</span> <span class="mi">65536</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>순서가 중요한데, 내가 풀 땐 알파벳을 뺀 나머지 제거를 먼저 해서 다르게 나왔다.</li>
  <li>우선 각 문자열의 조건을 확인해보면, 대소문자 구분없이, 공백, 숫자, 특수기호를 제외한 알파벳만 유효하다. 그리고 각각 두 글자씩 겹쳐서 자른 후 요소들을 교집합, 합집합을 비교한다.</li>
  <li><code class="language-plaintext highlighter-rouge">explode()</code> 사용자 정의 함수는, 위 조건들을 만족시키기 위한 함수이다.
인자로 받은 문자열을 길이의 -1 까지만 순회하는데, 그 이유는 2개씩 문자열을 잘라야 하기 때문이다.</li>
  <li><code class="language-plaintext highlighter-rouge">node</code>라는 변수에 문자열을 <code class="language-plaintext highlighter-rouge">substr(i, 2)</code>를 사용해서, i부터 길이 2까지 담는다.</li>
  <li>두 개씩 분리된 문자열을 <code class="language-plaintext highlighter-rouge">match()</code>메서드를 사용해서, 문자열이 소문자 및 대문자이고 길이가 2인 문자열이라면 <code class="language-plaintext highlighter-rouge">result</code>에 소문자로 변경 후 푸쉬하는 함수이다.</li>
  <li>이 함수를 매개변수 <code class="language-plaintext highlighter-rouge">str1</code>과 <code class="language-plaintext highlighter-rouge">str2</code>를 넣고 작동시키면 공백, 숫자, 특수문자가 제거되고 소문자로만 이루어진 두 문자열씩 끊어진 배열이 반환된다.</li>
  <li>이제 각각의 배열과 비교해서 합집합, 교집합을 구하면 된다.</li>
</ol>
:ET