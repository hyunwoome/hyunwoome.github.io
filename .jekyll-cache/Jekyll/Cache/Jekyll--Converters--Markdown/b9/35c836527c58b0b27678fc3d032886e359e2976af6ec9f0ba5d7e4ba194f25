I"P!<p><a href="https://programmers.co.kr/learn/courses/30/lessons/17680#qna">문제</a></p>

<h2 id="문제-설명">문제 설명</h2>

<p>문제에 대한 자세한 설명은 위 링크에 나와있다. 여기선 구현해야할 부분만 설명하겠다.</p>

<p>먼저 숫자<code class="language-plaintext highlighter-rouge">cacheSize</code>와 도시 이름이 문자열로 담겨있는<code class="language-plaintext highlighter-rouge">cities</code> 배열이 주어진다.
도시를 순회하면서 <code class="language-plaintext highlighter-rouge">cacheSize</code>의 숫자만큼 담을 수 있고 <code class="language-plaintext highlighter-rouge">cacheSize</code>의 길이가 넘치면 큐처럼 배열의 앞에서 빠져나가게 된다.
도시를 한 번 순회할 때 마다 count를 <strong>5</strong>씩 증가시키고, 만약 순회할 도시가 <code class="language-plaintext highlighter-rouge">cacheSize</code>에 있다면 count를 <strong>1</strong>씩 증가시킨다.
여기서 주의해야할 점은 해당 도시 이름이 <code class="language-plaintext highlighter-rouge">cacheSize</code>에 들어있다면, 배열의 앞에서 빼지않고 해당 도시 이름이 뒤로 오게된다.</p>

<p><strong>예시 1</strong></p>

<table>
  <thead>
    <tr>
      <th>cacheSize</th>
      <th>cities</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>3</td>
      <td>[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”, “Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”]</td>
      <td>50</td>
    </tr>
    <tr>
      <td>3</td>
      <td>[“Jeju”, “Pangyo”, “Seoul”, “Jeju”, “Pangyo”, “Seoul”, “Jeju”, “Pangyo”, “Seoul”]</td>
      <td>21</td>
    </tr>
    <tr>
      <td>2</td>
      <td>[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”, “SanFrancisco”, “Seoul”, “Rome”, “Paris”, “Jeju”, “NewYork”, “Rome”]</td>
      <td>60</td>
    </tr>
    <tr>
      <td>5</td>
      <td>[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”, “SanFrancisco”, “Seoul”, “Rome”, “Paris”, “Jeju”, “NewYork”, “Rome”]</td>
      <td>52</td>
    </tr>
    <tr>
      <td>2</td>
      <td>[“Jeju”, “Pangyo”, “NewYork”, “newyork”]</td>
      <td>16</td>
    </tr>
    <tr>
      <td>0</td>
      <td>[“Jeju”, “Pangyo”, “Seoul”, “NewYork”, “LA”]</td>
      <td>25</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h2 id="해결방법">해결방법</h2>

<p><strong>접근하기</strong></p>

<p>일단 캐시를 담을 큐를 선언한다.
이 큐는 배열로 만들며, 도시들이 들어오는 곳이다.
<code class="language-plaintext highlighter-rouge">cities</code>를 순회하면서 각 도시들을 큐에 삽입하는데, 만약 이 큐에 삽입하려는 도시가 있다면, 카운트를 1만 증가시키고 큐에 있는 해당 도시를 제거 후 뒤로 보낸다. 즉, 해당 도시를 뒤로 땡기는 것과 마찬가지.</p>

<p>만약 이 큐에 삽입하려는 도시가 없다면, 도시를 큐에 삽입하면서 카운트를 5만큼 증가시키고 큐의 맨 앞 원소를 제거한다.</p>

<p><strong>알고리즘</strong></p>

<ol>
  <li>문제 조건에 대소문자를 가리지 않는다고 했으니 편의상 모두 소문자로 바꿔준다. (대문자도 상관없음)</li>
  <li><code class="language-plaintext highlighter-rouge">cache</code>라는 큐를 정의했고, 카운트를 추적할 <code class="language-plaintext highlighter-rouge">answer</code> 변수를 정의했다.</li>
  <li>이제 소문자로 바꾼 도시들을 순회한다.</li>
  <li>첫 번째로 도시를 순회하면서 <code class="language-plaintext highlighter-rouge">cache</code>큐에 해당 도시가 들어있는지 확인하고, 도시가 들어있다면 큐에 들어있는 해당 도시의 인덱스를 구해 <code class="language-plaintext highlighter-rouge">splice</code>로 제거한다. 그리고 해당 도시를 다시 삽입하면 마치 해당 도시를 뒤로 땡겨온 듯한 로직을 구현할 수 있다.</li>
  <li>해당 도시가 들어있지 않다면, 해당 도시를 <code class="language-plaintext highlighter-rouge">cache</code>에 넣고, <code class="language-plaintext highlighter-rouge">cache</code>의 사이즈인 <code class="language-plaintext highlighter-rouge">cacheSize</code>를 넘게 되면 <code class="language-plaintext highlighter-rouge">shift()</code>하며 <code class="language-plaintext highlighter-rouge">cache</code>의 맨 앞 원소를 제거한다. 해당 도시가 들어있지 않기 때문에 카운트를 5증가시킨다.</li>
  <li>모든 <code class="language-plaintext highlighter-rouge">cities</code>를 순회하고 더해진 카운트를 반환한다.</li>
</ol>

<p><br /></p>

<h2 id="풀이코드">풀이코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">solution</span><span class="p">(</span><span class="nx">cacheSize</span><span class="p">,</span> <span class="nx">cities</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">lowerCaseCities</span> <span class="o">=</span> <span class="nx">cities</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">str</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span>

  <span class="kd">let</span> <span class="nx">cache</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">lowerCaseCities</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">lowerCaseCities</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">lowerCaseCities</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      <span class="nx">cache</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="nx">cache</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">lowerCaseCities</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      <span class="nx">answer</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">cache</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">lowerCaseCities</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      <span class="nx">answer</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">cacheSize</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">cache</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET