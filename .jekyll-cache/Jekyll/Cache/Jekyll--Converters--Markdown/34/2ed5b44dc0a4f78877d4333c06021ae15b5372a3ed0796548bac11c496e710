I"<p><a href="https://leetcode.com/problems/number-of-good-pairs/">문제</a></p>

<h2 id="문제-설명">문제 설명</h2>

<p>숫자형 배열 nums가 주어진다. 이 배열에서 우리는 “좋은 쌍”(Good Pairs)의 개수를 찾는 것이다.
“좋은 쌍”이란, nums[i] === nums[j]를 만족하는 쌍을 말한다.
주어진 배열에서 모든 “좋은 쌍”을 찾아 그 개수를 반환한다.</p>

<p><br /></p>

<h2 id="내-코드">내 코드</h2>

<ul>
  <li><strong>Runtime</strong>: 64 ms, faster than 99.66%</li>
  <li><strong>Memory Usage</strong>: 38.6 MB, less than 20.61%</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">numIdenticalPairs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">obj</span><span class="p">[</span><span class="nx">number</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">number</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">answer</span> <span class="o">+=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">((</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">answer</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>배열에 같은 숫자의 중복 가능한 쌍을 찾는 데는 2중 for문으로도 찾을 수 있지만 시간이 오래 걸릴 것이다. (O(n^2))</li>
  <li>객체(해시)를 이용하면 (O(n) 시간 복잡도로 구현할 수 있다.</li>
  <li>먼저 배열을 순회하며 객체를 만들어 줄 건데, 배열의 원소를 키로, 그 원소들의 중복된 개수를 값으로 하여 객체를 만든다.</li>
  <li>해당 객체를 순회하며, 배열의 동일한 경우의 수를 찾는 공식을 사용한다. (n * (n - 1) / 2)</li>
</ol>
:ET