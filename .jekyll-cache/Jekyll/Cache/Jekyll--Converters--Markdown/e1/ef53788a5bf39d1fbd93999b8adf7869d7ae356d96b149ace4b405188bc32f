I"<blockquote>
  <p>이 포스팅은 이웅모님의 <a href="https://wikibook.co.kr/mjs/">JavaScript Deep Dive</a>를 읽고 정리한 내용입니다.</p>
</blockquote>

<p><br /></p>

<h2 id="1-값">1. 값</h2>

<ul>
  <li><strong>값은 식(표현식, expression)이 평가(evaluate)되어 생성된 결과</strong></li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 10 + 20은 평가되어 30을 생성</span>
<span class="mi">10</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// 30</span>

<span class="c1">// 변수에는 10 + 20이 평가되어 생성된 숫자 30이 할당</span>
<span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">20</span><span class="p">;</span> <span class="c1">// var sum = 30</span>
</code></pre></div></div>

<ul>
  <li>즉, 할당되기 이전, 평가 가능한 식은 평가하여 값으로 만든 후 할당된다.</li>
</ul>

<p><br /></p>

<h2 id="2-리터럴">2. 리터럴</h2>

<ul>
  <li><strong>리터럴(literal)은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법(notation)</strong></li>
</ul>

<p><br /></p>

<h2 id="3-표현식">3. 표현식</h2>

<ul>
  <li>
    <p><strong>표현식(expression)은 값으로 평가될 수 있는 문(statement)이다. 즉, 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.</strong></p>
  </li>
  <li>
    <p>리터럴도 그 자체가 값이 되기 때문에 표현식이라고 할 수 있다.</p>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 100은 리터럴이며 JS엔진에 의해 평가되어 값을 생성하므로 표현식이다</span>
<span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="c1">// 50 + 50은 리터럴과 연산자로 이루어져 있으며 평가될 수 있으므로 표현식이다.</span>
<span class="kd">var</span> <span class="nx">score</span> <span class="o">=</span> <span class="mi">50</span> <span class="o">+</span> <span class="mi">50</span><span class="p">;</span>

<span class="c1">// 변수를 참조하면 값으로 평가된다. 즉, 변수를 참조하는 것도 표현식이다.</span>
<span class="nx">score</span><span class="p">;</span> <span class="c1">// 100</span>
</code></pre></div></div>

<ul>
  <li>
    <p><strong>값으로 평가될 수 있는 문은 모두 표현식이다.</strong></p>

    <ul>
      <li>표현식은 값으로 평가된다. 이때 표현식과 값은 동등한 관계이며, 따라서 표현식은 값처럼 사용할 수 있다.</li>
      <li><strong>즉, 값이 위치할 수 있는 자리에는 표현식이 위치할 수 있다는 것을 의미한다.</strong></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h2 id="4-문">4. 문</h2>

<ul>
  <li>
    <p><strong>문(statement)은 프로그램을 구성하는 기본 단위이자 최소 실행단위</strong></p>

    <ul>
      <li>문은 여러 토큰(token)으로 이루어져 있는데, <strong>토큰이란 문법적인 의미를 가지며 , 문법적으로 더이상 나눌 수 없는 코드의 기본 요소를 의미한다.</strong></li>
    </ul>
  </li>
  <li>
    <p>문은 보통 명령문이라고도 부르며, 선언문, 할당문, 조건문 등으로 구분할 수 있다.</p>
  </li>
</ul>

<p><br /></p>

<h2 id="5-표현식인-문과-표현식이-아닌-문">5. 표현식인 문과 표현식이 아닌 문</h2>

<ul>
  <li>표현식은 문의 일부일 수도 있고, 그 자체로 문이 될 수 도 있다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니지만 하나의 문이다.</span>
<span class="c1">// 표현식이 아닌 문</span>
<span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>

<span class="c1">// 아래 코드는 표현식이면서 하나의 문이다.</span>
<span class="c1">// 표현식인 문</span>
<span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>위처럼 문에는 <strong>표현식인 문</strong>과, <strong>표현식이 아닌 문</strong>이 있다.</p>
  </li>
  <li>
    <p>표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단한 방법은 <strong>변수에 할당해 보는 것</strong>이다.</p>

    <ul>
      <li>표현식은 문은 값으로 평가되므로 변수에 할당할 수 있으며, 표혀식이 아닌 문은 값으로 평가할 수 없으므로 변수에 할당하면 에러가 발생한다.</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 변수 선언문은 표현식이 아닌 문</span>
<span class="kd">var</span> <span class="nx">x</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">var</span> <span class="nx">x</span><span class="p">;</span> <span class="c1">// SyntaxError: Unexpected token var</span>

<span class="c1">// 할당문은 표현식인 문</span>
<span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span> <span class="c1">// 100</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="6-세미콜론과-세미콜론-자동-삽입-기능">6. 세미콜론과 세미콜론 자동 삽입 기능</h2>

<ul>
  <li>세미콜론(<code class="language-plaintext highlighter-rouge">;</code>)은 문의 종료를 나타낸다.</li>
  <li>자바스크립트 엔진은 세미콜론으로 문이 종료한 위치를 파악하고 순차적으로 실행</li>
  <li>단, 코드 블럭 ({…})은 자체 종결성을 갖기 때문에 뒤에 세미콜론을 붙이지 않는다.</li>
</ul>
:ET