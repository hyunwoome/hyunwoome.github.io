I"Q<p><a href="https://leetcode.com/problems/degree-of-an-array/">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>숫자형 배열 <code class="language-plaintext highlighter-rouge">nums</code>가 주어진다. <code class="language-plaintext highlighter-rouge">nums</code>의 원소들 중 가장 많이 중복된 원소를 찾고, 그 중에서 앞의 인덱스와 뒤의 인덱스의 범위 차이가 가장 작은 범위내의 원소 개수를 반환한다.</p>

<p><br /></p>

<h2 id="참고-코드">참고 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">findShortestSubArray</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">count</span><span class="p">[</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">count</span><span class="p">[</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">max</span><span class="p">,</span> <span class="nx">count</span><span class="p">[</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]]);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">left</span><span class="p">[</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">left</span><span class="p">[</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">right</span><span class="p">[</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">let</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">===</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">right</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">-</span> <span class="nx">left</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>그렇게 어려운 문제는 아닌데, 구현에서 실수가 생겨 코드를 참고하였다.</li>
  <li>먼저 앞쪽의 인덱스 번호를 저장할 <code class="language-plaintext highlighter-rouge">left</code>, 오른쪽 인덱스 번호를 저장할 <code class="language-plaintext highlighter-rouge">right</code>, <code class="language-plaintext highlighter-rouge">nums</code> 배열의 원소의 중복된 개수를 저장하기 위한 <code class="language-plaintext highlighter-rouge">count</code>, 그 중 중복된 수가 가장 많은 원소를 담는 <code class="language-plaintext highlighter-rouge">max</code>가 있다.</li>
  <li>먼저 <code class="language-plaintext highlighter-rouge">nums</code>배열을 순회하면서, 중복된 개수를 구하고, 중복된 개수를 저장한 <code class="language-plaintext highlighter-rouge">count</code>객체를 토대로 가장 큰 값을 <code class="language-plaintext highlighter-rouge">max</code>에 저장한다.</li>
  <li>다음 모든 원소의 첫 좌표와 끝 좌표를 구하는데, 구하는 방식이 재밌다. 먼저 <code class="language-plaintext highlighter-rouge">left[nums[i]] === undefined</code>는 <code class="language-plaintext highlighter-rouge">left[nums[i]]</code>가 없을 경우에만 좌표를 넣는다. 이미 좌표가 있다면 더이상 할당하지 않는다. <code class="language-plaintext highlighter-rouge">right[nums[i]] = i;</code>는 조건문과 관계없이 항상 나오는대로 할당한다. 그래서 for문을 다 돌면 결국 맨 마지막 인덱스 번호를 알 수 있게 된다.</li>
  <li>다음으로 <code class="language-plaintext highlighter-rouge">count</code>객체를 순회하는데, <code class="language-plaintext highlighter-rouge">count</code>객체의 각 값들이 <code class="language-plaintext highlighter-rouge">max</code>에 동일하면 <code class="language-plaintext highlighter-rouge">right[k] - left[k] + 1</code>해서 가장 작은 간격을 <code class="language-plaintext highlighter-rouge">res</code>에 담고 반환한다.</li>
</ol>
:ET