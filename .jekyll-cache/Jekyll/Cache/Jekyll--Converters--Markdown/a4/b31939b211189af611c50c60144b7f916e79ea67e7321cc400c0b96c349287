I"<p><a href="https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>숫자 <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>와 2차원 숫자형 배열 <code class="language-plaintext highlighter-rouge">points</code>가 주어진다. <code class="language-plaintext highlighter-rouge">x</code>와 <code class="language-plaintext highlighter-rouge">y</code>는 좌표를 의미하고, <code class="language-plaintext highlighter-rouge">points</code>의 내부 배열도 좌표를 의미한다. 두 좌표의 맨하탄 거리를 구해, 가장 짧은 거리의 좌표의 인덱스를 반환하며, 둘 이상의 인덱스가 존재하면 더 인덱스 번호를 반환한다.</p>

<p><br /></p>

<h2 id="참고-코드">참고 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">nearestValidPoint</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">points</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="kc">Infinity</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">points</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">dist</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">points</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">y</span> <span class="o">-</span> <span class="nx">points</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">points</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nx">x</span> <span class="o">||</span> <span class="nx">points</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">dist</span> <span class="o">&lt;</span> <span class="nx">min</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">idx</span> <span class="o">=</span> <span class="nx">points</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">points</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
          <span class="nx">min</span> <span class="o">=</span> <span class="nx">dist</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">idx</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>2중 for문을 이용해 풀었는데, 굳이 2중까지 안가도 됐었다.</li>
  <li>각각의 좌표들을 <code class="language-plaintext highlighter-rouge">x</code>와 <code class="language-plaintext highlighter-rouge">y</code>의 맨하탄거리를 구하고, 가장 작은 값을 구하며(<code class="language-plaintext highlighter-rouge">min</code>), 작은 값의 인덱스 번호를 구한 뒤 반환한다.</li>
</ol>
:ET