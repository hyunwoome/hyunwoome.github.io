I"<p><a href="https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>숫자형 배열 <code class="language-plaintext highlighter-rouge">nums</code>가 주어진다. 각 원소들이 어떤 수를 더했을 때 모든 원소의 값이 1이 넘는 수를 반환한다.</p>

<p><br /></p>

<h2 id="참고-코드">참고 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">minStartValue</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="kc">Infinity</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">num</span> <span class="k">of</span> <span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">num</span><span class="p">;</span>
    <span class="nx">min</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">min</span><span class="p">,</span> <span class="nx">sum</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">min</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="o">-</span><span class="nx">min</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>각각의 수를 더해 매번 확인해보려 했는데, 풀리지 않아 솔루션을 참고했다.</li>
  <li>먼저 <code class="language-plaintext highlighter-rouge">nums</code>배열을 모두 순회하면서 더하는데, 여기서 더한 값과 <code class="language-plaintext highlighter-rouge">min</code>을 비교해 더 작은 수를 <code class="language-plaintext highlighter-rouge">min</code>에 할당한다.</li>
  <li><code class="language-plaintext highlighter-rouge">min</code>이 0보다 작으면 부호를 변경해서 1을 더해주고 아니면 1을 반환한다.</li>
  <li>즉, <code class="language-plaintext highlighter-rouge">nums</code>의 배열의 요소들을 모두 더하는데, 더했을 때 가장 작은 수가 1이상이 되야 하기 때문에 이러한 로직인 듯 하다.</li>
</ol>
:ET