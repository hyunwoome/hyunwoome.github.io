I"L<p><a href="https://leetcode.com/problems/merge-two-binary-trees/">문제</a></p>

<h2 id="문제-설명">문제 설명</h2>

<p>두 개의 이진트리 root1과 root2가 주어진다.</p>

<p>두 트리를 새로운 이진트리로 병합한다. 병합 규칙은 두 노드가 겹치는 경우 병합된 노드의 새 값으로 두 노드의 합이 들어가며, 해당 노드가 하나가 없다면 있는 노드에서 채운다.</p>

<p><br /></p>

<h2 id="참고-코드">참고 코드</h2>

<ul>
  <li>Runtime: 104 ms, faster than 94.80%</li>
  <li>Memory Usage: 47 MB, less than 5.20%</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */</span>
<span class="cm">/**
 * @param {TreeNode} root1
 * @param {TreeNode} root2
 * @return {TreeNode}
 */</span>
<span class="kd">var</span> <span class="nx">mergeTrees</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">root1</span><span class="p">,</span> <span class="nx">root2</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">root1</span><span class="p">)</span> <span class="k">return</span> <span class="nx">root2</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">root2</span><span class="p">)</span> <span class="k">return</span> <span class="nx">root1</span><span class="p">;</span>
  <span class="nx">root1</span><span class="p">.</span><span class="nx">left</span> <span class="o">=</span> <span class="nx">mergeTrees</span><span class="p">(</span><span class="nx">root1</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span> <span class="nx">root2</span><span class="p">.</span><span class="nx">left</span><span class="p">);</span>
  <span class="nx">root1</span><span class="p">.</span><span class="nx">right</span> <span class="o">=</span> <span class="nx">mergeTrees</span><span class="p">(</span><span class="nx">root1</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span> <span class="nx">root2</span><span class="p">.</span><span class="nx">right</span><span class="p">);</span>
  <span class="nx">root1</span><span class="p">.</span><span class="nx">val</span> <span class="o">=</span> <span class="nx">root1</span><span class="p">.</span><span class="nx">val</span> <span class="o">+</span> <span class="nx">root2</span><span class="p">.</span><span class="nx">val</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">root1</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>두 트리를 병합하기 위해 재귀를 이용한다.</li>
  <li>먼저 두 루트의 왼쪽, 오른쪽을 탐색하며, 왼쪽, 오른쪽에 노드가 있다면, 두 노드의 값을 더해 root1에 병합한다.</li>
  <li>만약 두 루트 중 한쪽의 루트가 끝이나 null이 된다면, 다른 루트가 있는지 확인하고 해당 루트의 노드로 대체한다.</li>
</ol>
:ET