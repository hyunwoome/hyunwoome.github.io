I"<p><a href="https://leetcode.com/problems/destination-city/">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>문자열 2차원 배열이 주어진다. 2차원 배열 내 문자열들은 <code class="language-plaintext highlighter-rouge">cityA</code>와 <code class="language-plaintext highlighter-rouge">cityB</code>를 의미하는데, 이는 <code class="language-plaintext highlighter-rouge">cityA</code>에서 출발해 <code class="language-plaintext highlighter-rouge">cityB</code>라는 목적지에 도착한다는 것을 말한다.</p>

<p>더이상 갈 곳 없는 최종 도착지를 반환하는 문제이다.</p>

<p><br /></p>

<h2 id="내-코드">내 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">destCity</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">paths</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">dest</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">paths</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">dest</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">paths</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">dest</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">el</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">paths</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">includes</span><span class="p">(</span><span class="nx">el</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">answer</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">count</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">answer</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">count</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(...</span><span class="nx">count</span><span class="p">));</span>
  <span class="k">return</span> <span class="nx">dest</span><span class="p">[</span><span class="nx">min</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>먼저 2중for문을을 이용해 각 배열의 도착지만 가져와서 배열에 담았다.</li>
  <li>더이상 갈 곳이 없다면 각 배열에 딱 하나만 있을 것이다. 최종 목적지가 아니라면 배열을 순회할 떄 2개 이상 있을 것 이다.</li>
  <li>그래서 목적지를 <code class="language-plaintext highlighter-rouge">paths</code>의 내부 배열을 각각 순회하면서 몇개가 포함되어 있는지 <code class="language-plaintext highlighter-rouge">count</code>에 담았다.</li>
  <li>이 <code class="language-plaintext highlighter-rouge">count</code>에서 가장 작은 수가 바로 목적지일 것이다.</li>
  <li><code class="language-plaintext highlighter-rouge">count</code>에서 가장 작은 수의 인덱스 번호를 얻고 목적지가 담겨있는 <code class="language-plaintext highlighter-rouge">dest</code>배열의 인덱스의 값을 가져오면 그 값이 최종 목적지이다.</li>
</ol>
:ET