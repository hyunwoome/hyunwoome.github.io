I"#-<blockquote>
  <p>이 포스팅은 이웅모님의 <a href="https://wikibook.co.kr/mjs/">JavaScript Deep Dive</a>를 읽고 정리한 내용입니다.</p>
</blockquote>

<p><br /></p>

<h2 id="1-데이터-타입">1. 데이터 타입</h2>

<ul>
  <li><strong>자바스크립트의 모든 값은 데이터 타입을 갖는다.</strong></li>
  <li>
    <p>자바스크립트는 7개의 데이터 타입을 제공하며, <strong>원시 타입(primitive type)</strong>과 <strong>객체 타입(object/reference type)</strong>으로 분류한다.</p>
  </li>
  <li><strong>원시 타입</strong>
    <ul>
      <li>숫자 타입 (number)</li>
      <li>문자열 타입 (string)</li>
      <li>불리언 타입 (boolean)</li>
      <li>undefined 타입</li>
      <li>null 타입</li>
      <li>심벌 타입 (symbol)</li>
    </ul>
  </li>
  <li><strong>객체 타입 (객체, 함수, 배열 등)</strong></li>
</ul>

<p><br /></p>

<h2 id="2-숫자-타입">2. 숫자 타입</h2>

<ul>
  <li>자바스크립트는 정수, 실수 등의 타입이 별도로 존재하지 않고 하나의 숫자 타입만 존재</li>
  <li>숫자 타입은 배정밀도 64비트 <strong>부동소수점</strong> 형식을 따른다.</li>
  <li>즉, 정수만을 위한 타입이 없고 모든 수를 <strong>실수</strong>로 처리한다. 따라서 정수로 표시되는 수끼리 나누더라도 실수가 나올 수 있다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// 1.5</span>
</code></pre></div></div>

<ul>
  <li>숫자 타입은 추가적으로 특별한 세 가지 값을 표현할 수 있다. 이 값들은 타입이 아닌 숫자 타입 값의 종류중 하나이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Infinity</code> : 양의 무한대</li>
      <li><code class="language-plaintext highlighter-rouge">-Infinity</code> : 음의 무한대</li>
      <li><code class="language-plaintext highlighter-rouge">NaN</code> : 산술 연산 불가 (Not-a-Number)</li>
    </ul>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">10</span> <span class="o">/</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// Infinity</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">10</span> <span class="o">/</span> <span class="o">-</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// -Infinity</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="dl">'</span><span class="s1">String</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// NaN</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="3-문자열-타입">3. 문자열 타입</h2>

<ul>
  <li>문자열은 텍스트 데이터를 나타내는데 사용하며, 문자열은 <strong>0개 이상의 16비트 유니코드 문자(UTF-16)의 집합</strong>으로 전 세계 대부분의 문자를 표현할 수 있다.</li>
  <li>문자열은 작은따옴표, 큰따옴표, 백틱으로 텍스트를 감싸며, 기본적으로 작은따옴표를 사용한다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// hello</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// hello</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`hello`</span><span class="p">);</span> <span class="c1">// hello</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="4-템플릿-리터럴">4. 템플릿 리터럴</h2>

<ul>
  <li>ES6부터 템플릿 리터럴이라고 하는 새로운 문자열 표기법이 도입되었다.</li>
  <li>템플릿 리터럴은 멀티라인 문자열, 표현식 삽입, 태그드 리터럴 등 편리한 문자열 처리 기능을 제공한다.</li>
  <li>
    <p>템플릿 리터럴은 백틱(`)을 사용한다.</p>
  </li>
  <li>멀티라인 문자열</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`hello
world
`</span><span class="p">);</span>
<span class="c1">// hello</span>
<span class="c1">// world</span>
</code></pre></div></div>

<ul>
  <li>표현식 삽입</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">first</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hyunwoo</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">last</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Lim</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`My name is </span><span class="p">${</span><span class="nx">first</span><span class="p">}${</span><span class="nx">last</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// My name is hyunwooLim</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`1 + 2 = </span><span class="p">${</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> <span class="c1">// 1 + 2 = 3</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="5-불리언-타입">5. 불리언 타입</h2>

<ul>
  <li>논리적 참, 거짓을 나타내는 <code class="language-plaintext highlighter-rouge">true</code>와 <code class="language-plaintext highlighter-rouge">false</code>를 나타낸다.</li>
</ul>

<p><br /></p>

<h2 id="6-undefined-타입">6. undefined 타입</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">undefined</code> 타입의 값은 <code class="language-plaintext highlighter-rouge">undefined</code>가 유일하다.</li>
  <li><code class="language-plaintext highlighter-rouge">undefined</code>는 <strong>개발자가 의도적으로 할당하기 위한 값이 아닌 자바스크립트 엔진이 변수를 초기화</strong>할 때 사용하는 값이다.</li>
  <li>개발자가 <code class="language-plaintext highlighter-rouge">undefined</code>를 의도적으로 할당한다면 <code class="language-plaintext highlighter-rouge">undefined</code>의 본래 취지와 어긋나고 혼란을 줄 수 있으므로 권장하지 않고 대신 <code class="language-plaintext highlighter-rouge">null</code>을 할당한다.</li>
</ul>

<p><br /></p>

<h2 id="7-null-타입">7. null 타입</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">null</code>타입의 값은 <code class="language-plaintext highlighter-rouge">null</code>이 유일하다.</li>
  <li><code class="language-plaintext highlighter-rouge">null</code>은 <strong>변수에 값이 없다는 것을 의도적으로 명시</strong>할 때 사용한다.</li>
  <li>변수에 <code class="language-plaintext highlighter-rouge">null</code>을 할당하는 것은 <strong>변수가 이전에 참조하던 값을 더 이상 참조하지 않겠다</strong>는 의미이다.</li>
  <li>값이 없다는 것을 의도적으로 명시할 땐 <code class="language-plaintext highlighter-rouge">undefined</code>보다 <code class="language-plaintext highlighter-rouge">null</code>을 사용하자.</li>
</ul>

<p><br /></p>

<h2 id="8-심벌-타입">8. 심벌 타입</h2>

<ul>
  <li>ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다.</li>
  <li>심벌 값은 다른 값과 중복되지 않는 유일무이한 값을 나타낸다.</li>
  <li>주로 이름이 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들 기 위해 사용한다.</li>
  <li>심벌은 <code class="language-plaintext highlighter-rouge">Symbol</code>함수를 통해서만 생성할 수 있다.</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="nb">Symbol</span><span class="p">(</span><span class="dl">'</span><span class="s1">key</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">key</span><span class="p">);</span> <span class="c1">// symbol</span>

<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">value</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span> <span class="c1">// value</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="9-객체-타입">9. 객체 타입</h2>

<ul>
  <li>자바스크립트는 <strong>객체 기반의 언어</strong>이며, <strong>자바스크립트를 이루고 있는 거의 모든 것이 객체</strong>이다.</li>
</ul>

<p><br /></p>

<h2 id="10-데이터-타입의-필요성">10. 데이터 타입의 필요성</h2>

<h3 id="1-데이터-타입에-의한-메모리-공간의-확보와-참조">1) 데이터 타입에 의한 메모리 공간의 확보와 참조</h3>

<ul>
  <li>모든 데이터를 2진수로 저장하는 컴퓨터에서 <strong>개발자가 의도한 값을 할당하거나 참조하기 위해선 메모리의 크기를 정해서 적절한 값을 사용하기 위해 데이터 타입이 필요</strong>하다.</li>
</ul>

<h3 id="2-데이터-타입에-의한-값의-해석">2) 데이터 타입에 의한 값의 해석</h3>

<ul>
  <li>메모리에서 저장된 2진수 데이터를 의도한 값으로 해석하기 위해서 타입을 알아야 한다.</li>
  <li>데이터 타입이 필요한 이유는,
    <ul>
      <li>값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정</li>
    </ul>
  </li>
</ul>
:ET