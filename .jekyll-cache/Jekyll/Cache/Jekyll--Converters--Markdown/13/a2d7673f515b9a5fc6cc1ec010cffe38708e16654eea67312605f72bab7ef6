I"h<p><a href="https://leetcode.com/problems/move-zeroes/">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>문자형으로 이루어진 배열 <code class="language-plaintext highlighter-rouge">nums</code>가 주어진다. 다른 요소들의 순서는 변함없이 0만 배열의 맨 뒤로 옮겨 반환한다. 이 때, 새로운 배열을 생성하지 않고 제자리방식(in-place)으로 해결해야 한다.</p>

<p><br /></p>

<h2 id="내-코드">내 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">moveZeroes</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
        <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">nums</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>2중 for문을 이용해서, <code class="language-plaintext highlighter-rouge">i</code>가 0일 때, <code class="language-plaintext highlighter-rouge">j</code>와 스왑(swap)하도록 해서 맨뒤로 보내는 방식을 이용했다.</li>
  <li>숫자의 크기를 비교하면 안되는데, 그 이유는 테스트케이스 중 음수가 들어간 경우가 있기 때문이다.</li>
  <li>2중 for문을 사용했기 때문에 시간복잡도는 그리 좋지 못하다. 솔루션을 보면서 좀더 효율적인 방법을 확인해보자.</li>
</ol>

<h2 id="참고-코드">참고 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">moveZeroes</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
      <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>이중 for문을 사용하지 않고 <code class="language-plaintext highlighter-rouge">n</code>만큼만 순회하면서 투 포인터 방식으로 스왑하여 기존 코드의 시간복잡도 <code class="language-plaintext highlighter-rouge">120ms</code>에서 <code class="language-plaintext highlighter-rouge">80ms</code>으로 줄일 수 있다.</li>
</ol>
:ET