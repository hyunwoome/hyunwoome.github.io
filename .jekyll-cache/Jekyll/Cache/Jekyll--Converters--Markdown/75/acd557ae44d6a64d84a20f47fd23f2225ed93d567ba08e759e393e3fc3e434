I"<p><a href="https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away/">문제</a></p>

<h2 id="접근하기">접근하기</h2>

<p>숫자형 배열 <code class="language-plaintext highlighter-rouge">nums</code>와 숫자 <code class="language-plaintext highlighter-rouge">k</code>가 주어진다. 이 배열은 0과 1로 이루어져 있는데, 모든 1과 1 사이의 간격이 적어도 k만큼 떨어져 있으면 <code class="language-plaintext highlighter-rouge">true</code>를, 아니면 <code class="language-plaintext highlighter-rouge">false</code>를 반환한다.</p>

<p><br /></p>

<h2 id="참고-코드">참고 코드</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">kLengthApart</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="nx">k</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&lt;</span> <span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<ol>
  <li>처음 <code class="language-plaintext highlighter-rouge">count</code>에 <code class="language-plaintext highlighter-rouge">k</code>를 할당한다.</li>
  <li><code class="language-plaintext highlighter-rouge">nums</code>를 순회하면서 1을 만났을 때, <code class="language-plaintext highlighter-rouge">count</code>의 값이 <code class="language-plaintext highlighter-rouge">k</code>보다 작으면 간격이 <code class="language-plaintext highlighter-rouge">k</code>보다 작다는 의미이다. 그럼 <code class="language-plaintext highlighter-rouge">false</code>를 반환하며, 첫 1은 <code class="language-plaintext highlighter-rouge">count</code>와 <code class="language-plaintext highlighter-rouge">k</code>가 같기 때문에 넘어간다.</li>
  <li>넘어간 후 다음 1을 만날 때 까지의 거리를 구하기 위해 <code class="language-plaintext highlighter-rouge">count</code>에 0을 할당하고, 1이 아닌 경우 <code class="language-plaintext highlighter-rouge">count</code>를 증가시켜 1과 1사이의 거리를 <code class="language-plaintext highlighter-rouge">count</code>의 수를 확인해서 구할 수 있다.</li>
</ol>
:ET